---
# tasks file for nameservers

- name: Get the file name
  shell: "ls /etc/netplan/*.yaml"
  register: filename

- name: Copy file and set up the permission and owner of the file 
  copy:
    src: "{{ filename.stdout }}"
    dest: "{{ filename.stdout }}.bak"
    remote_src: yes
    #mode: 0755     #### Debug 1
    force: no

- debug: msg={{ filename.stdout }}

- name: Modify /etc/netplan/*.yaml 
  replace:
    path:  "{{ filename.stdout }}"
    regexp: 'ens3'
    replace: "eth0"

- name: Append extra content to /etc/netplan/*.yaml file
  #shell: cat {{ ansible_files_dir_remote }}/files/cloud-01-init.yaml >> "{{ filename.stdout }}"
  shell: 'if grep eth0 {{ filename.stdout }}; then true; else cat {{ ansible_files_dir_remote }}/files/cloud-01-init.yaml >> {{ filename.stdout }};fi'

- name: Ansible copy  cloud-init.yaml to the remote server
  copy:
      src: "{{ ansible_files_dir_remote }}/files/cloud-init.yaml"
      dest: "{{ filename.stdout }}"
      remote_src: yes

- name: Fetch IP address - ens3
  shell: ip addr show ens3 | awk '/inet/ {print $2}' | cut -d/ -f1 | head -1
  register: IP_ENS3

- name: Fetch IP addressa - eth0
  shell: ip addr show eth0 | awk '/inet/ {print $2}' | cut -d/ -f1 | head -1
  register: IP_ETH0

- name: Fetch IP address - eth0
  #shell: if [ {{ IP_ENS3.stdout }}  == "Device "ens3" does not exist" ]; then echo {{ IP_ETH0.stdout }}; else echo {{ IP_ENS3.stdout }}; fi
  shell: if [ {{ IP_ENS3.stdout }} ]; then echo {{ IP_ENS3.stdout }}; else echo {{ IP_ETH0.stdout }}; fi
  #when:  "'does not exist' in IP.stdout"
  register: IP

- debug: msg={{ IP_ENS3.stdout }}
- debug: msg={{ IP_ETH0.stdout }}
- debug: msg={{ IP.stdout }}

- name: Fetch mac address
  shell: ip addr show ens3 | awk '/ether/ {print $2}' | cut -d/ -f1
  register: MAC_ENS3

- name: Fetch mac address
  shell: ip addr show eth0 | awk '/ether/ {print $2}' | cut -d/ -f1
  register: MAC_ETH0

- name: Fetch MAC address from ens3/eth0
  shell: if [ {{ MAC_ENS3.stdout }} ]; then echo {{ MAC_ENS3.stdout }}; else echo {{ MAC_ETH0.stdout }}; fi
  #when:  "'does not exist' in IP.stdout"
  register: MAC


- name: Fetch DNS server address
  shell: cat "{{ dns_server }}" | grep -v '^#' | grep nameserver | awk '{print $2}'
  register: DNS

- name: Set variables
  set_fact:
      HOST_IP_ADDRESS: "{{ IP.stdout }}"
      HOST_MAC_ADDRESS: "{{ MAC.stdout }}"
      HOST_DNS_ADDRESS: "{{ DNS.stdout }}"

- name: "Replace IPaddress in network init file"
  replace:
      path: "{{ filename.stdout }}"
      regexp: "{{ item.regexp }}"
      replace: "{{ item.replace }}"
  with_items:
      - { regexp: 'REPLACE_IPADDRESS', replace: "{{ HOST_IP_ADDRESS }}" }
      - { regexp: 'REPLACE_MACADDRESS', replace: "{{ HOST_MAC_ADDRESS }}" }
      - { regexp: 'REPLACE_DNSADDRESS', replace: "{{ HOST_DNS_ADDRESS }}" }
  become: yes

- name: Add Private IP to /etc/hosts file
  shell: 'if grep "{{ host_name }}" /etc/hosts; then true; else echo   "{{ HOST_IP_ADDRESS }}"  "{{ host_name }}" >> /etc/hosts;fi'

- name: Reboot host and wait for it to restart
  reboot:
    msg: "Reboot initiated by Ansible"
    connect_timeout: 5
    reboot_timeout: 600
    pre_reboot_delay: 0
    post_reboot_delay: 120
    test_command: ls -l

- name: "edit /etc/systemd/resolved.conf file to use localhost as DNS server"
  lineinfile:
      dest: /etc/systemd/resolved.conf
      regexp: '^(.*)DNS(.*)$'
      line: "DNS=127.0.0.1"
      state: present
      create: true

- name: Enable systemd-resolved and reload daemon
  systemd:
    name: systemd-resolved
    enabled: yes
    daemon_reload: yes
    state: restarted

- name: Execute the command "systemd-resolve --status" and search for 127.0.0.1
  shell: systemd-resolve --status | grep 127.0.0.1
  register: output

- name: Enable dnsmasq and reload daemon
  systemd:
    name: dnsmasq
    state: restarted
    enabled: yes
